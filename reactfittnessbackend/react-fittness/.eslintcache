[{"C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\App.js":"1","C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\reportWebVitals.js":"2","C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\index.js":"3","C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Pages\\Dietpage.js":"4","C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Pages\\Profilepage.js":"5","C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Pages\\Socialpage.js":"6","C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Pages\\Mappage.js":"7","C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Pages\\Homepage.js":"8","C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Components\\Header.js":"9","C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Components\\Homecarousel.js":"10","C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Components\\Drawer.js":"11","C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Containers\\Profile.js":"12","C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Components\\ranking.js":"13","C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Components\\Ranking.js":"14","C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Components\\RankingContainer.js":"15","C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Components\\Recipe.js":"16","C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Components\\Recipewidget.js":"17"},{"size":1258,"mtime":1606545523631,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1606158142844,"results":"20","hashOfConfig":"19"},{"size":517,"mtime":1606617112071,"results":"21","hashOfConfig":"19"},{"size":181,"mtime":1606618773017,"results":"22","hashOfConfig":"19"},{"size":918,"mtime":1606617112068,"results":"23","hashOfConfig":"19"},{"size":304,"mtime":1606595312194,"results":"24","hashOfConfig":"19"},{"size":1935,"mtime":1606451526379,"results":"25","hashOfConfig":"19"},{"size":710,"mtime":1606364397887,"results":"26","hashOfConfig":"19"},{"size":1350,"mtime":1606617112065,"results":"27","hashOfConfig":"19"},{"size":2296,"mtime":1606701346440,"results":"28","hashOfConfig":"19"},{"size":757,"mtime":1606617112064,"results":"29","hashOfConfig":"19"},{"size":12264,"mtime":1606630581659,"results":"30","hashOfConfig":"19"},{"size":1739,"mtime":1606542346556,"results":"31","hashOfConfig":"19"},{"size":1331,"mtime":1606701514400,"results":"32","hashOfConfig":"19"},{"size":2210,"mtime":1606701600430,"results":"33","hashOfConfig":"19"},{"size":3341,"mtime":1606702296845,"results":"34","hashOfConfig":"19"},{"size":663,"mtime":1606702333736,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19mj1vf",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\App.js",[],"C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\reportWebVitals.js",[],"C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\index.js",[],["72","73"],"C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Pages\\Dietpage.js",[],"C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Pages\\Profilepage.js",[],"C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Pages\\Socialpage.js",[],"C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Pages\\Mappage.js",[],"C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Pages\\Homepage.js",[],"C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Components\\Header.js",[],"C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Components\\Homecarousel.js",[],"C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Components\\Drawer.js",[],"C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Containers\\Profile.js",["74","75"],"import React from 'react';\r\nimport {Line, Radar} from 'react-chartjs-2'\r\nimport '../css/profile.css'\r\nimport bargraph from  '../Assets/bargraph.png'\r\nimport areagraph from '../Assets/areagraph.svg'\r\n// const Barchart = () => {\r\n//     return <div>\r\n//         <Bar\r\n//             height = {200}\r\n//             width={600}\r\n//             data={{\r\n//                 labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\r\n//                 data: [12, 19, 3, 5, 2, 3],\r\n//             }}\r\n//         />\r\n//     </div>\r\n// }\r\n\r\nclass Profile extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n            this.state = {\r\n                profilelist:[],\r\n                activeItem:{\r\n                    name:'',\r\n                    maxHR:null,\r\n                    stepcount:null,\r\n                    weight:null,\r\n                },\r\n/* constructor intial values for our profile componentstate using props(properties)   */           \r\n                editing:false,\r\n                }\r\n                this.fetchProfiles = this.fetchProfiles.bind(this)\r\n/*above line gives access to this method for fetchprofiles*/\r\n            };\r\n    \r\n    componentWillMount(){\r\n        this.fetchProfiles();\r\n/*calls the function that makesthe api call*/\r\n    }\r\n\r\n    fetchProfiles(){\r\n        console.log('fetching...')\r\n        fetch('http://localhost:8000/api/list')\r\n        .then(response => response.json())\r\n        .then(data =>\r\n            this.setState({ /*sets the state of the profile list to the data from the api*/\r\n                profilelist:data\r\n            })         \r\n            )\r\n    }\r\n /* above function uses cors library to allow the above url to  connect to the api where it would otherwise be blocked */      \r\n /* above function makes an api call to me api for the data for the graph data */   \r\n \r\n    render(){\r\n        var profiles = this.state.profilelist; /*set the profilelist to a var */\r\n        console.log('profile:', profiles)\r\n\r\n        \r\n        return(       \r\n        <div>\r\n            {this.state.profilelist.map(function(profile, index){\r\n                {/* this line maps each record we receive from the api to a var called profile which we use to access the fields demonstrated later in line 69 and 200 */}\r\n                {/* loop through our profile data */}\r\n                return(\r\n                    <div key={index}>\r\n                    {/* this line tells us to look at each index or pk from the list, but we only have 1 in this case */}\r\n                    <h1 className=\"title\">Welcome to your profile: {profile.name} </h1>\r\n                    <div className=\"graphcontainer\">\r\n                        \r\n                        <div className= \"smallbg\"><img src={areagraph} alt=\"not found\"></img></div>\r\n                        <div className= \"smallbg\">\r\n                         {/* react radar chart using chartjs , we set height, width and a load of customisation options for styling, further below in the line graph we use api data to populate the graph */}\r\n                            <Radar\r\n                                height = {400}\r\n                                width = {400}\r\n                                options={{\r\n                                    title: {\r\n                                    display: true,\r\n                                    text: \"Track Your Goals\",\r\n                                    fontColor: \"white\",\r\n                                    },\r\n                                    animation: {\r\n                                        easing: \"easeInOutQuart\"\r\n                                        },\r\n                                    legend: {\r\n                                        labels: {\r\n                                        fontColor: 'rgba(255,255,255,1)'\r\n                                        },\r\n                                    },\r\n                                    maintainAspectRatio:false,\r\n                                    scale: {\r\n                                        ticks: {\r\n                                            beginAtZero: true,\r\n                                            showLabelBackdrop: false,\r\n                                            fontColor: 'white',\r\n                                            // need this to remove labels bg on the chart and make labels white                \r\n                                        },\r\n                                        pointLabels: {\r\n                                            fontColor: 'white' // labels around the edge like arms, back etc\r\n                                        },\r\n                                        gridLines: {\r\n                                            color: 'rgba(255,255,255,0.2)'\r\n                                        },\r\n                                        angleLines: {\r\n                                            color: 'white'\r\n                                        }\r\n                                    }\r\n                                \r\n                                }}\r\n                                data = {{                               \r\n                                    labels: [\"Arms\", \"Back\", \"Legs\",\"Core\",\"Shoulders\", \"Cardio\"],\r\n                                    datasets: [ {\r\n                                        label: \"Progress\",\r\n                                        backgroundColor: \"rgba(97,219,251,0.3)\",\r\n                                        borderColor: \"rgba(97,219,251,0.8)\",\r\n                                        pointBackgroundColor: \"rgba(97,219,251,0.8))\",\r\n                                        data: [9.7,8.3,7.6,6.8,6.4,9.3],\r\n                                        },\r\n                                        {\r\n                                        label: \"Goals\",\r\n                                        backgroundColor: \"rgba(144,124,202,0.3)\",\r\n                                        borderColor: \"rgba(144,124,202,0.8)\",\r\n                                        pointBackgroundColor: \"rgba(144,124,202,0.8)\",\r\n                                        data: [9.5,9.2,9.5,9,8.8,8.7],\r\n                                        notes: [\"Arms\", \"Back\", \"Legs\",\"Core\",\"Shoulders\", \"Cardio\"]\r\n                                        },\r\n                                    ]\r\n                                }}\r\n                        \r\n                            /> \r\n                        </div>                      \r\n                    </div>\r\n                    <div className= \"smallbg2\"><img src = {bargraph} alt=\"not found\"></img></div>\r\n                    <div className=\"linebg\">\r\n                    {/* this is the line graph using the same customisation as the radar graph, much of the layout and formatting is done through the surrounding divs */}\r\n                    {/* check line 200 to see how we call the data from the api */}\r\n                        <div className = \"line\">\r\n                        <Line \r\n                            height = {280}\r\n                            width={1400}\r\n                            options= {{\r\n                                title: {\r\n                                    display: true,\r\n                                    text: \"Track Your weight\",\r\n                                    fontColor: \"white\",\r\n                                },\r\n                                responsive: false,\r\n                                legend: {\r\n                                    labels: {\r\n                                    fontColor: 'rgba(255,255,255,1)',\r\n                                    display: true,\r\n                                    },\r\n                                },\r\n                                scales: {\r\n                                    xAxes: [{\r\n                                        gridLines: {\r\n                                            color: 'rgba(255,255,255,0.2)',\r\n                                        },\r\n                                        display: true,\r\n                                        scaleLabel: {\r\n                                            display: true,\r\n                                            labelString: 'Month',  \r\n                                            fontColor: \"white\",  \r\n                                            },\r\n                                        ticks: {\r\n                                            fontColor: \"white\",\r\n                                        },\r\n                                        \r\n                                        }],\r\n                                    yAxes: [{  \r\n                                        gridLines: {\r\n                                            color: 'rgba(255,255,255,0.2)',\r\n                                        },\r\n                                        display: true,\r\n                                        //type: 'logarithmic',\r\n                                        scaleLabel: {\r\n                                                display: true,\r\n                                                labelString: 'Weight (Kg)',\r\n                                                fontColor: \"white\"\r\n                                            }, \r\n                                                ticks: {\r\n                                                    fontColor: \"white\",\r\n                                                    min: 70,\r\n                                                    max: 100,\r\n                                                    // forces step size to be 5 units\r\n                                                    stepSize: 10,\r\n                                            }\r\n                                    }]\r\n                                },\r\n                                }}     \r\n\r\n                            data= {{\r\n                                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ],\r\n                                datasets: [{\r\n                                    borderWidth: 5,\r\n                                    label: \"My Weight\",\r\n                                    borderColor: \"rgba(144,124,202,0.7)\",\r\n                                    fill: false,\r\n                                    data: [\r\n                                        78, 80, 82, 79, 80, 84, 90, 88, 90, 92, 88,\r\n                                        profile.weight,\r\n                                        // as mentioned we used the profile variable to map to a set of data from the list fetched using the api and the above line calls weight which is a field in our table\r\n                                        ],\r\n                                    },\r\n                                    {\r\n                                    borderWidth: 5,\r\n                                    label: \"Goal\",\r\n                                    borderColor: \"rgba(97,219,251,0.7)\",\r\n                                    fill: false,\r\n                                    data: [\r\n                                        72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94,\r\n                                        ],\r\n                                    },\r\n                                    {\r\n                                    borderWidth: 5,\r\n                                    label: \"Forecasted\",\r\n                                    borderColor: \"rgba(217,119,25,0.5)\",\r\n                                    backgroundColor: \"rgba(217,119,25,1)\",\r\n                                    fill: false,\r\n                                    data: [\r\n                                        82, 84, 86, 82, 80, 82, 80, 86, 85, 88, 97, 89.5,\r\n                                        ],\r\n                                    },\r\n                                    ]\r\n                                    }}\r\n    \r\n                        />\r\n                        </div>   \r\n                    </div>\r\n                    </div>\r\n/* map function takes the data from the data list we got from the api and loops through it usng pk and then we can show the data  */                 \r\n                )\r\n            })}\r\n        </div>\r\n        )\r\n    }\r\n};\r\nexport default Profile;","C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Components\\ranking.js",["76","77"],"C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Components\\Ranking.js",["78"],"C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Components\\RankingContainer.js",[],"C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Components\\Recipe.js",["79"],"C:\\Users\\khama\\ReactFittness\\reactfittnessbackend\\react-fittness\\src\\Components\\Recipewidget.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":63,"column":17,"nodeType":"86","messageId":"87","endLine":63,"endColumn":171},{"ruleId":"84","severity":1,"message":"85","line":64,"column":17,"nodeType":"86","messageId":"87","endLine":64,"endColumn":54},{"ruleId":"88","severity":1,"message":"89","line":25,"column":7,"nodeType":"90","messageId":"91","endLine":25,"endColumn":14},{"ruleId":"92","severity":2,"message":"93","line":50,"column":18,"nodeType":"94","endLine":50,"endColumn":21},{"ruleId":"88","severity":1,"message":"95","line":2,"column":10,"nodeType":"90","messageId":"91","endLine":2,"endColumn":18},{"ruleId":"96","severity":1,"message":"97","line":21,"column":8,"nodeType":"98","endLine":21,"endColumn":15,"suggestions":"99"},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unused-vars","'Ranking' is defined but never used.","Identifier","unusedVar","react/jsx-no-undef","'App' is not defined.","JSXIdentifier","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getrecipes'. Either include it or remove the dependency array.","ArrayExpression",["102"],"no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},"Update the dependencies array to be: [getrecipes, query]",{"range":"105","text":"106"},[1210,1217],"[getrecipes, query]"]